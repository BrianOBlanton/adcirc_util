function f22 = import_adc_f22(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   F22 = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   F22 = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   f22 = importfile('f22.dat', 1, 21);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2016/10/04 10:21:44

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,6,7,8,9,10,12,14,15,16,17,18,20,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using the
% specified date format.
try
    dates{3} = datetime(dataArray{3}, 'Format', 'yyyyMMddHH', 'InputFormat', 'yyyyMMddHH');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{3} = cellfun(@(x) x(2:end-1), dataArray{3}, 'UniformOutput', false);
        dates{3} = datetime(dataArray{3}, 'Format', 'yyyyMMddHH', 'InputFormat', 'yyyyMMddHH');
    catch
        dates{3} = repmat(datetime([NaN NaN NaN]), size(dataArray{3}));
    end
end

anyBlankDates = cellfun(@isempty, dataArray{3});
anyInvalidDates = isnan(dates{3}.Hour) - anyBlankDates;
dates = dates(:,3);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [2,6,7,8,9,10,12,14,15,16,17,18,20,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47]);
rawCellColumns = raw(:, [1,4,5,11,13,19,21,22,23,24,25,28]);


%% Create output variable
f22 = table;
f22.AL = rawCellColumns(:, 1);
f22.VarName2 = cell2mat(rawNumericColumns(:, 1));
f22.VarName3 = dates{:, 1};
f22.VarName4 = rawCellColumns(:, 2);
f22.BEST = rawCellColumns(:, 3);
f22.VarName6 = cell2mat(rawNumericColumns(:, 2));
f22.N = cell2mat(rawNumericColumns(:, 3));
f22.W = cell2mat(rawNumericColumns(:, 4));
f22.VarName9 = cell2mat(rawNumericColumns(:, 5));
f22.VarName10 = cell2mat(rawNumericColumns(:, 6));
f22.VarName11 = rawCellColumns(:, 4);
f22.VarName12 = cell2mat(rawNumericColumns(:, 7));
f22.NEQ = rawCellColumns(:, 5);
f22.VarName14 = cell2mat(rawNumericColumns(:, 8));
f22.VarName15 = cell2mat(rawNumericColumns(:, 9));
f22.VarName16 = cell2mat(rawNumericColumns(:, 10));
f22.VarName17 = cell2mat(rawNumericColumns(:, 11));
f22.VarName18 = cell2mat(rawNumericColumns(:, 12));
f22.VarName19 = rawCellColumns(:, 6);
f22.VarName20 = cell2mat(rawNumericColumns(:, 13));
f22.VarName21 = rawCellColumns(:, 7);
f22.VarName22 = rawCellColumns(:, 8);
f22.VarName23 = rawCellColumns(:, 9);
f22.VarName24 = rawCellColumns(:, 10);
f22.VarName25 = rawCellColumns(:, 11);
f22.VarName26 = cell2mat(rawNumericColumns(:, 14));
f22.VarName27 = cell2mat(rawNumericColumns(:, 15));
f22.MATTHEW = rawCellColumns(:, 12);
f22.VarName29 = cell2mat(rawNumericColumns(:, 16));
f22.VarName30 = cell2mat(rawNumericColumns(:, 17));
f22.VarName31 = cell2mat(rawNumericColumns(:, 18));
f22.VarName32 = cell2mat(rawNumericColumns(:, 19));
f22.VarName33 = cell2mat(rawNumericColumns(:, 20));
f22.VarName34 = cell2mat(rawNumericColumns(:, 21));
f22.VarName35 = cell2mat(rawNumericColumns(:, 22));
f22.VarName36 = cell2mat(rawNumericColumns(:, 23));
f22.VarName37 = cell2mat(rawNumericColumns(:, 24));
f22.VarName38 = cell2mat(rawNumericColumns(:, 25));
f22.VarName39 = cell2mat(rawNumericColumns(:, 26));
f22.VarName40 = cell2mat(rawNumericColumns(:, 27));
f22.VarName41 = cell2mat(rawNumericColumns(:, 28));
f22.VarName42 = cell2mat(rawNumericColumns(:, 29));
f22.VarName43 = cell2mat(rawNumericColumns(:, 30));
f22.VarName44 = cell2mat(rawNumericColumns(:, 31));
f22.VarName45 = cell2mat(rawNumericColumns(:, 32));
f22.VarName46 = cell2mat(rawNumericColumns(:, 33));
f22.VarName47 = cell2mat(rawNumericColumns(:, 34));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% f22.VarName3=datenum(f22.VarName3);
% convert to degrees
f22.LatNS= f22.N/10;
f22.LonEW=-f22.W/10;


