function T = read_adcirc_nws20(filename, startRow, endRow)
%read_adcirc_nws20 Import numeric data from a text file as a matrix.
%   T = read_adcirc_nws20(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   T = read_adcirc_nws20(FILENAME, STARTROW, ENDROW) Reads data
%   from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   mandyNWS20fort = importfile1('mandy_NWS_20_fort.22', 1, 66);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/07/06 13:17:02

%% Initialize variables.
delimiter = ',';
if nargin == 0 
    filename='fort.22';
end

if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,6,7,8,9,10,12,14,15,16,17,18,20,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using the
% specified date format.
try
    dates{3} = datetime(dataArray{3}, 'Format', 'yyyyMMddHH', 'InputFormat', 'yyyyMMddHH');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{3} = cellfun(@(x) x(2:end-1), dataArray{3}, 'UniformOutput', false);
        dates{3} = datetime(dataArray{3}, 'Format', 'yyyyMMddHH', 'InputFormat', 'yyyyMMddHH');
    catch
        dates{3} = repmat(datetime([NaN NaN NaN]), size(dataArray{3}));
    end
end

anyBlankDates = cellfun(@isempty, dataArray{3});
anyInvalidDates = isnan(dates{3}.Hour) - anyBlankDates;
dates = dates(:,3);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [2,6,7,8,9,10,12,14,15,16,17,18,20,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47]);
rawCellColumns = raw(:, [1,4,5,11,13,19,21,22,23,24,25,28]);


%% Create output variable
T = table;
T.BASIN = rawCellColumns(:, 1);
T.CY = cell2mat(rawNumericColumns(:, 1));
T.YYYYMMDDHH = dates{:, 1};
T.TECHNUM = rawCellColumns(:, 2);
T.TECH = rawCellColumns(:, 3);
T.TAU = cell2mat(rawNumericColumns(:, 2));
T.LatNS = cell2mat(rawNumericColumns(:, 3));
T.LonEW = cell2mat(rawNumericColumns(:, 4));
T.VMAX = cell2mat(rawNumericColumns(:, 5));
T.MSLP = cell2mat(rawNumericColumns(:, 6));
T.TY = rawCellColumns(:, 4);
T.VarName12 = cell2mat(rawNumericColumns(:, 7));
T.WINDCODE  = rawCellColumns(:, 5);
T.RAD1 = cell2mat(rawNumericColumns(:, 8));
T.RAD2 = cell2mat(rawNumericColumns(:, 9));
T.RAD3 = cell2mat(rawNumericColumns(:, 10));
T.RAD4 = cell2mat(rawNumericColumns(:, 11));
T.POUTER = cell2mat(rawNumericColumns(:, 12));
T.ROUTER = rawCellColumns(:, 6);
T.RMW = cell2mat(rawNumericColumns(:, 13));
T.GUSTS = rawCellColumns(:, 7);
T.EYE = rawCellColumns(:, 8);
T.SUBREGION = rawCellColumns(:, 9);
T.MAXSEAS = rawCellColumns(:, 10);
T.INITIALS = rawCellColumns(:, 11);
T.DIR = cell2mat(rawNumericColumns(:, 14));
T.SPEED = cell2mat(rawNumericColumns(:, 15));
T.STORMNAME = rawCellColumns(:, 12);

if isempty(cell2mat(rawNumericColumns(:, 16)))
    T.DEPTH=NaN(height(T),1);
else
    T.DEPTH = cell2mat(rawNumericColumns(:, 16));
end

T.SEAS = cell2mat(rawNumericColumns(:, 17));
T.SEASCODE = cell2mat(rawNumericColumns(:, 18));
T.SEAS1 = cell2mat(rawNumericColumns(:, 19));
T.SEAS2 = cell2mat(rawNumericColumns(:, 20));
T.SEAS3 = cell2mat(rawNumericColumns(:, 21));
T.SEAS4 = cell2mat(rawNumericColumns(:, 22));
T.VarName36 = cell2mat(rawNumericColumns(:, 23));
T.VarName37 = cell2mat(rawNumericColumns(:, 24));
T.VarName38 = cell2mat(rawNumericColumns(:, 25));
T.VarName39 = cell2mat(rawNumericColumns(:, 26));
T.VarName40 = cell2mat(rawNumericColumns(:, 27));
T.VarName41 = cell2mat(rawNumericColumns(:, 28));
T.VarName42 = cell2mat(rawNumericColumns(:, 29));
T.VarName43 = cell2mat(rawNumericColumns(:, 30));
T.VarName44 = cell2mat(rawNumericColumns(:, 31));
T.VarName45 = cell2mat(rawNumericColumns(:, 32));
T.VarName46 = cell2mat(rawNumericColumns(:, 33));
T.VarName47 = cell2mat(rawNumericColumns(:, 34));

% convert to degrees
T.LatNS=T.LatNS/10;
T.LonEW=-T.LonEW/10;

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% T.DateTime=datenum(T.DateTime);

